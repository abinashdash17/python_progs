[range]
range(a,b) gets values from a to b-1
[misc functions)
define encoding at start of tge file
use str1 = u"hello" to use unicode string
chr(97) to print character whose ascii value is 97.
int(str,2) to convert a str in binary form to decimal integer
str1.isdigit() and str1.isalpha() to check for digit and alphabet
str1.isupper() and str1.islower() to check for upper or lower case
sum(list_name) -> add numbers in a list
single line if--> expr if (condition)
sorted(list1) -> for sorted list
sorted( ) -> this will sort tuples automatically using 1st parameter then 2nd then 3rd and so on... if order needs to be changed use itemgetter

for x in something: -> this something can be a list or generator
round(5.6) -> 6
int(5.6) -> 5
how to use lambda:{
assign lambda to a variable . call the variable with a parameter 
example:
with function
def x(a) :
	return a*a
x(2)
with lambda :
x = lambda a : a*a
x(2)
}
inbuilt doc system :
use ''' doc text ''' inside function definition
use fn_name.__doc__ to read the doc
filter function -> use f_obj = filter(funtion,list) . It returns a filter object which is similar to iterator . So for loop is required to get the elements or list() funtion can be used . Note: the function should return True or False depending upon the required value to be filtered. lambda can be used in place of this function too.
map function -> this can be used similar to filter instead of retruning treu or false the function should return some value like x*x or x ** 3 etc...
filter and map can be used recurssively . And only 1 list() function is required to expand all items .
e.g : list(filter(func,map_obj)) where map_obj = map(func,li)
no need to use list(map_obj) inside filter function.
map or filter -> range(a,b) can be used as 2nd parameter in this function.e.g - map(func, range(0,21))
use raise(RuntimeError("text"))
class ====
dont use brackets in class definition expression
i.e class name :
don't use class name() :
use __init__() to define instance parameter
[specialty of :]
just by adding ":" at the end of line, writing do,then,end etc. can be plainly avoided which is necessary in lua or bash
[dictionary]
to use dictionary use the below functions
1.dict_name[key]=value
2.dict_name[key]
3.dict_name.pop(key)
4.print(dict_name) to print the whole dictionary
5.dict_name(key,default_value) -> the problem with dict_name[key] is that if key doesn't exist, it  will through an error . The solution is to use the get funciton . It can be used to get a default value if the key doesn't exists.
6.dict.keys() -> return list of keys
7.dict.items() -> return list of key and value pair
8.dict.values() -> returns list of values in dictionary
[list and tuple]
use str.split(',') to convert str to list delimited by comma.
use tuple(list_name) to convert list to tuple.
use set(list_name) to convert list to set (removes redundant element)
use sorted(list_name) to sort alphabatically.
use x.append(element) to add element
use x.pop() to delete recent element
to join a list of strings, use
",".join(list_of_str)
LIST COMPREHENSION:{
lst = [[ i*j for j in range(0,3)] for i in range(0,40) ]
lst = [ i for i in range(1,5) ]
}
li.sort() --> sort contents of list alphabetically but does n't return the list. So to keep list intact first copy to a new list then apply sort on new list.
slicing:
li[2:4] - > to get 2nd to 4th element
[classes]
use 'pass' to run program without error
__init__(self) for constructor
use self inside methods.
__del__() --> destructor
use clasname.var to access static variable
use self.var to access instance variable

regex tips:
[char_to_be_matched]
^d..h$
[^except_this_character]
^ - starts with
$ - ends with
* - zero or more occurance to left of it
\w - to match alpha numerci chars including _

use re.findall(pat,str1) to get a list of matched string 

review the excercises again:
ex 20
check ex55.py again
